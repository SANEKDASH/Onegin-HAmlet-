#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "color_print.h"
#include "debug.h"
#include "onegin_funcs.h"

static void OptVoidSwap(void *a, void *b, size_t data_size);
static int binarySearch(Lines *data, Lines *item_pos, int low, int high, int (*CompFunc)(const void* str_lhs, const void* str_rhs));
static int SubStrCmp(const char *ptr_str_lhs,
                     size_t lhs_len,
                     const char *ptr_str_rhs,
                     size_t rhs_len);

void PrintTextInFile(Lines *text, FILE *output_file)
{
    CHECK(output_file);

    for (int i  = 0; (text + i)->line != nullptr; i++)
    {
        fprintf(output_file, "%s\n", (text + i)->line);
    }
}

long long GetFileSize(FILE *ptr_file)
{
    CHECK(ptr_file);

    long long start_pos = ftell(ptr_file);

    fseek(ptr_file, start_pos, SEEK_END);
    long long buf_size = ftell(ptr_file);

    fseek(ptr_file, 0, SEEK_SET);

    return buf_size;
}

int SplitBufIntoLines(char *buf)
{
    CHECK(buf);

    char *read_ptr = buf;
    int lines_count = 0;

    while (*read_ptr++ != '\0')
    {
        if (*read_ptr == '\n')
        {
            while (*read_ptr == '\n')
            {
                ++read_ptr;
            }

            *(--read_ptr) = '\0';

            ++lines_count;

            ++read_ptr;
        }
    }

    return lines_count;
}

void FillText(Lines *text, const char *buf, size_t BufSize)
{
    CHECK(text);
    CHECK(buf);

    size_t i = 0;

    char *cur_line = (char *)buf;

    while (i < BufSize)
    {
        if (*(buf + i) == '\0')
        {
            text->line = cur_line;
            (text++)->line_len = strlen(cur_line);
            ++i;

            cur_line = (char *)(buf + i);
        }
        ++i;
    }

    text->line = cur_line;
    (text++)->line_len = strlen(cur_line);

    text->line = nullptr;
    text->line_len = 0;
}

void VoidInsertSort(void *data,
                    size_t data_len,
                    size_t data_size,
                    int (*CompFunc)(const void* str_lhs, const void* str_rhs))
{
    CHECK(CompFunc);
    CHECK(data);

    for (size_t i = 0; i < data_len; i++)
    {
        for (size_t n = i; n > 0; n--)
        {
            if (CompFunc((data + n * data_size), (data + (n  - 1) * data_size)) < 0)
            {
                OptVoidSwap((data + n * data_size), (data + (n - 1) * data_size), data_size);
            }
        }
    }
//rabotaet
}

static void MemCpy(void *a, void *b, size_t data_size)


static void OptVoidSwap(void *a, void *b, size_t data_size)
{
    CHECK(a);
    CHECK(b);
    CHECK(abs((char *)a - (char *)b) >= data_size);

    size_t delta = 0;

    for (size_t i = 0; i * sizeof(int) < data_size; ++i)
    {
        int tmp = *(int *)(a + i * sizeof(int));

        *(int *)(a + i * sizeof(int)) = *(int *)(b + i * sizeof(int));

        *(int *)(b + i * sizeof(int)) = tmp;

        delta += sizeof(int);
    }

    for (size_t i = 0; i * sizeof(char) < data_size - delta; ++i)
    {
        char tmp = *(char*)(b + delta);

        *(char*)(b + delta) = *(char*)(a + delta);

        *(char*)(a + delta) = tmp;

        delta += sizeof(char);
    }
}


int MyStrcmp (const void *ptr_str_lhs, const void *ptr_str_rhs)
{
    CHECK(ptr_str_rhs);
    CHECK(ptr_str_lhs);
    Lines str_lhs = *((Lines *) ptr_str_lhs);

    Lines str_rhs = *((Lines *) ptr_str_rhs);

    while (*(str_lhs.line) != '\0' && *(str_rhs.line) != '\0')
    {
        if (!isalpha(*str_lhs.line))
        {
            str_lhs.line++;

            continue;
        }

        if (!isalpha(*str_rhs.line))
        {
            str_rhs.line++;

            continue;
        }

        if (isalpha(*str_lhs.line) && isalpha(*str_rhs.line) &&
            toupper(*str_lhs.line) == toupper(*str_rhs.line))
        {
            ++str_lhs.line;
            ++str_rhs.line;

            continue;
        }
        else
        {
            return toupper(*str_lhs.line) - toupper(*str_rhs.line);
        }
    }
    return toupper(*str_lhs.line) - toupper(*str_rhs.line);
}

int MyReverseStrcmp(const void *ptr_str_lhs, const void *ptr_str_rhs)
{
    CHECK(ptr_str_lhs);
    CHECK(ptr_str_rhs);

    const char *lhs_str = ((const Lines *)ptr_str_lhs)->line + ((const Lines *)ptr_str_lhs)->line_len - 1;
    const char *rhs_str = ((const Lines *)ptr_str_rhs)->line + ((const Lines *)ptr_str_rhs)->line_len - 1;

    return SubStrCmp(((const Lines *)ptr_str_lhs)->line,
                     ((const Lines *)ptr_str_lhs)->line_len,
                     ((const Lines *)ptr_str_rhs)->line,
                     ((const Lines *)ptr_str_rhs)->line_len);
}

static int SubStrCmp(const char *ptr_str_lhs,
                     size_t lhs_len,
                     const char *ptr_str_rhs,
                     size_t rhs_len)
{
    CHECK(ptr_str_rhs);
    CHECK(ptr_str_lhs);

    const char *str_lhs = ptr_str_lhs + lhs_len - 1;
    const char *str_rhs = ptr_str_rhs + rhs_len - 1;

    while (lhs_len > 0  && rhs_len > 0)
    {
        if (!isalpha(*str_lhs))
        {
            lhs_len--;
            str_lhs--;

            continue;
        }

        if (!isalpha(*str_rhs))
        {
            rhs_len--;
            str_rhs--;

            continue;
        }

        if (toupper(*str_lhs) == toupper(*str_rhs))
        {
            --str_lhs;
            --str_rhs;
            --lhs_len;
            --rhs_len;

            continue;
        }
        else
        {
            return toupper(*str_lhs) - toupper(*str_rhs);
        }
    }

    return toupper(*str_lhs) - toupper(*str_rhs);
}

size_t GetLinesCount(const Lines *text)
{
    CHECK(text);
    size_t text_size = 0;

    while ((text + text_size)->line != nullptr)
    {
        ++text_size;
    }

    return text_size;
}


int CompPointers(const void *ptr_lhs_ptr, const void *ptr_rhs_ptr)
{
    CHECK(ptr_lhs_ptr);
    CHECK(ptr_lhs_ptr);
    const char *lhs_ptr = *(char **)ptr_lhs_ptr;
    const char *rhs_ptr = *(char **)ptr_rhs_ptr;

    return lhs_ptr - rhs_ptr;
}

int ReadTextFromFile(const char *file_name, Text* text)
{
    CHECK(file_name);

    FILE *input_file = fopen(file_name, "rb");
    if (input_file == nullptr)
    {
        ColorPrintf(kRed, "\nGot a problem with opening file\n");
        return -1;
    }

    static const size_t kBufSize = GetFileSize(input_file);

    text->buf = (char *) calloc(kBufSize + 1, sizeof(char));

    if (text->buf == nullptr)
    {
        ColorPrintf(kRed, "\nGot a problem with allocating data\n");
        return -2;
    }

    long long readen_number = fread(text->buf, sizeof(char), kBufSize, input_file);
    CHECK(readen_number);

    fclose(input_file);

    text->lines_count = SplitBufIntoLines(text->buf);
    text->lines_ptr = (Lines *) calloc(text->lines_count + 1, sizeof(Lines));

    if (text->lines_ptr == nullptr)
    {
        ColorPrintf(kRed, "\nGot a problem with allocating data\n");
        return -2;
    }

    FillText(text->lines_ptr, text->buf, kBufSize);
    return 0;
}

void insertionSort(void* data,
                   size_t data_len, 
                   size_t data_size, 
                   int (*CompFunc)(const void* str_lhs, const void* str_rhs))
{
    CHECK(data);
    int i = 0, loc = 0, j = 0;
    char* selected = nullptr;

    for (i = 1; i < data_len; ++i)
    {
        j = i - 1;
        selected = (char *) data + i * data_size;


        loc = binarySearch(data, selected, 0, j, CompFunc);


        while (j >= loc)
        {
            data[j + 1] = data[j];
            j--;
        }
        data[j + 1] = selected;
    }
}

static int binarySearch(void *data, 
                        void *item_pos, 
                        size_t data_size, 
                        size_t low,
                        size_t high,
                        int (*CompFunc)(const void* str_lhs, const void* str_rhs))
{
    if (high <= low)
    {
        return (CompFunc(item_pos, (data + low * data_size)) > 0 ) ? (low + 1) : low;
    }

    int mid = (low + high) / 2;

    if (CompFunc(item_pos, (data + mid * data_size)) == 0)
    {
        return mid + 1;
    }

    if (CompFunc(item_pos, (data + mid * data_size)) > 0)
    {
        return binarySearch(data, item_pos, mid + 1, high, CompFunc);
    }

    return binarySearch(data, item_pos, low, mid - 1, CompFunc);
}
// #defines!!!
// calloc --> ssanya_debug_calloc(.... + line + file ...)
// free --> ...
// log_file .html <pre>
// calloc(address, size) at file.cpp:12
// calloc at ....
// ...
// free(address, size???)
// free()
// valgrind/address sanitizer
//
// fprintf fopen disable bufferization
// fflush
